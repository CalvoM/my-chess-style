services:
  pg_server:
    image: "postgres:latest"
    container_name: "my_chess_style_pg"
    ports:
      - "5429:5432"
    env_file:
      - .env
    volumes:
      - pgdata:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d ${POSTGRES_DB} -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    command:
      ["postgres", "-c", "log_statement=all", "-c", "log_destination=stderr"]

  rabbitmq_server:
    image: "rabbitmq:4.0.2-management"
    container_name: "my_chess_style_rmq"
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER} # Load from .env
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS} # Load from .env
    restart: unless-stopped
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 30s
      retries: 3
    volumes:
      - rabbitmqdata:/var/lib/rabbitmq/

  cache:
    image: "redis:latest"
    container_name: "my_chess_style_cache"
    ports:
      - "6379:6379"
    env_file:
      - .env
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    command: ["redis-server", "--requirepass", "${CACHE_PASSWORD}"]
    volumes:
      - cachedata:/data

  prometheus:
    image: "prom/prometheus"
    container_name: "my_chess_style_prom"
    env_file:
      - .env
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
    ports:
      - 9090:9090
    restart: unless-stopped
    volumes:
      - ./observability/prometheus:/etc/prometheus
      - prom_data:/prometheus

  grafana:
    image: "grafana/grafana"
    container_name: "my_chess_style_graf"
    env_file:
      - .env
    ports:
      - 3000:3000
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_DEFAULT_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_DEFAULT_PASS}
    volumes:
      - ./observability/grafana:/etc/grafana/provisioning/datasources

  pg_explorer:
    image: "prometheuscommunity/postgres-exporter"
    container_name: "my_chess_style_pg_explorer"
    env_file:
      - .env
    ports:
      - 9187:9187
    depends_on:
      pg_server:
        condition: service_healthy
      prometheus:
        condition: service_started
    restart: unless-stopped

  django-web-frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    container_name: my_chess_style_django_web_frontend
    ports:
      - "3000:80"
    depends_on:
      django-web-backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/"]
      interval: 30s
      timeout: 3s
      retries: 3
  django-web-backend:
    build:
      context: .
      dockerfile: Dockerfile
    image: my-chess-style-base
    container_name: my_chess_style_django_web_backend
    # command: uv run python manage.py makemigrations && uv run python manage.py migrate && uv run python manage.py import_chess_openings && uv run python manage.py runserver 0.0.0.0:8000
    command: sh web_entry.sh
    ports:
      - "8000:8000"
    depends_on:
      pg_server:
        condition: service_healthy
      cache:
        condition: service_healthy
      rabbitmq_server:
        condition: service_healthy
    env_file:
      - .env
    develop:
      watch:
        - path: .
          target: /app
          action: sync
        - path: pyproject.toml
          action: rebuild
    volumes:
      - dockerdata:/data
  celery-worker:
    image: my-chess-style-base
    container_name: my_chess_style_celery_worker
    depends_on:
      django-web-backend:
        condition: service_healthy
      pg_server:
        condition: service_healthy
      cache:
        condition: service_started
      rabbitmq_server:
        condition: service_healthy
    env_file:
      - .env
    command: sh celery_entry.sh
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      django-web-backend:
        condition: service_healthy
      django-web-frontend:
        condition: service_healthy

networks:
  default:
    external: true
    name: my-chess-style-net
volumes:
  pgdata:
  rabbitmqdata:
  cachedata:
  prom_data:
  dockerdata:
  media_files:
  static_files:
